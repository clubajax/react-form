{"version":3,"file":"main.18697087c48388bad98a.bundle.js","sources":["webpack:///./src/List.js"],"sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport on from '@clubajax/on';\nimport uid from './lib/uid';\n\nconst ARIA_ITEM_PREFIX = 'ca-item-';\n\n// TODO: search key\n\nexport default class List extends React.Component {\n\n    constructor (props) {\n        super();\n        this.uncontrolled = props.defaultValue !== undefined;\n        let focusIndex = null;\n        let value = null;\n        const active = true;\n        if (props.value && props.options && props.options.length) {\n            value = props.value;\n            focusIndex = props.options.findIndex(item => item.value === value);\n        }\n        this.state = {\n            listId: uid('list'),\n            active,\n            focusIndex,\n            value\n        };\n\n        this.onClick = this.onClick.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onNode = this.onNode.bind(this);\n\n        if (!this.uncontrolled && !props.onChange) {\n            console.error('A controlled List will need an `onChange` event')\n        }\n    }\n\n    componentDidMount () {\n        this.connect();\n    }\n\n    componentWillUnmount () {\n        this.disconnect();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!this.uncontrolled && this.props.value !== prevProps.value) {\n            this.afterSelect();\n        }\n    }\n\n    onFocus () {\n        this.connect();\n    }\n\n    onBlur () {\n        this.disconnect();\n        if (this.props.isMenu) {\n            this.setState({\n                active: false,\n                focusValue: null,\n                value: null\n            })\n        }\n    }\n\n    onClick (e) {\n        const node = e.target.closest('[role=\"option\"]');\n        if (node.hasAttribute('disabled')) {\n            e.preventDefault();\n            return false;\n        }\n        // const value = node.getAttribute('value');\n        // const index = this.props.options.findIndex(item => `${item.value}` === value);\n        this.focus(node);\n        this.onChange(e);\n    }\n\n    onChange (e) {\n        const node = e.target.closest('[role=\"option\"]');\n        const value = node.getAttribute('value');\n        // const index = this.props.options.findIndex(item => `${item.value}` === value);\n        this.select(value);\n    }\n\n    select (value) {\n        const item = this.props.options.find(item => item.value === value);\n        if (this.props.onChange) {\n            this.props.onChange(item ? item.value : null);\n        }\n        if (item && item.onSelect) {\n            item.onSelect(item || null);\n        }\n        if (this.uncontrolled) {\n            this.setState({\n                value: item ? item.value : null\n            }, () => {\n                this.afterSelect();\n            });\n        }\n    }\n\n    afterSelect () {\n        const selected = this.node.querySelector('.ca-list-item.focused');\n        if (selected) {\n            selected.focus();\n        }\n    }\n\n    focus (node) {\n        this.setState({\n            focusValue: node ? node.getAttribute('value') : null\n        }, () => {\n            const focused = this.node.querySelector('.ca-list-item.focused');\n            if (focused) {\n                focused.focus();\n            }\n        });\n    }\n\n    connect () {\n        const { options } = this.props;\n        if (!options || !options.length) {\n            return;\n        }\n\n        this.disconnect();\n\n        const getNode = (index) => {\n            const nodes = this.node.querySelectorAll('li');\n            if (index < 0 || index > nodes.length - 1) {\n                return null;\n            }\n            if (!nodeIsNavAble(nodes[index])) {\n                return null;\n            }\n            return nodes[index];\n        };\n\n        const nodeIsNavAble = (node) => {\n            return !node.hasAttribute('disabled') && !node.classList.contains('label') && !node.classList.contains('group');\n        };\n\n        const getPrevNode = (index) => {\n            index = index - 1;\n            let node = getNode(index);\n            while (!node) {\n                index = index - 1;\n                if (index < 0) {\n                    index = options.length - 1;\n                }\n                node = getNode(index);\n            }\n            return node;\n        };\n\n        const getNextNode = (index) => {\n            index = index + 1;\n            let node = getNode(index);\n            while (!node) {\n                index = index + 1;\n                if (index > options.length - 1) {\n                    index = 0;\n                }\n                node = getNode(index);\n            }\n            return node;\n        };\n\n        this.keyHandle = on(this.node, 'keydown', (e) => {\n            const { focusValue } = this.state;\n            let node;\n            let index = focusValue === null ?  -1 : this.props.options.findIndex(item => item.value === focusValue);\n            const focused = this.node.querySelector('.ca-list-item.focused, [aria-selected=\"true\"]');\n            if (index === -1 && focused) {\n                const v = focused.getAttribute('value');\n                index = this.props.options.findIndex(item => item.value === v);\n            }\n            switch (e.key) {\n                case 'Enter': // TODO: disable Enter if in Form\n                case 'Space':\n                case ' ':\n                    this.select(focusValue);\n                    return;\n                case 'ArrowUp':\n                    e.preventDefault();\n                    node = getPrevNode(index);\n                    break;\n                case 'ArrowDown':\n                    e.preventDefault();\n                    node = getNextNode(index);\n                    break;\n                default:\n                    return;\n            }\n            this.focus(node);\n        });\n    }\n\n    disconnect () {\n        if (this.keyHandle) {\n            this.keyHandle.remove();\n        }\n    }\n\n    onNode (node) {\n        if (node) {\n            this.node = node;\n        }\n    }\n\n    render () {\n        const { options = [] } = this.props;\n        const { listId, focusValue, className } = this.state;\n\n        const value = this.uncontrolled ? this.state.value : this.props.value;\n\n        const selectedItem = options.find(item => item.value === value) || {};\n        const selectedId = selectedItem.value ? `${ARIA_ITEM_PREFIX}-${listId}-${selectedItem.value}` : null;\n        const rootTabIndex = selectedId ? -1 : 0;\n        let classname = classnames({\n            'ca-list': true\n        });\n        if (className) {\n            classname = `${classname} ${className}`;\n        }\n\n        return (\n            <ul\n                aria-activedescendant={selectedId}\n                className={classname}\n                role=\"listbox\"\n                tabIndex={rootTabIndex}\n                onFocus={this.onFocus}\n                onBlur={this.onBlur}\n                ref={this.onNode}\n            >\n                {options.map((item, i) => {\n                    const propLabel = typeof item.label !== 'object' ? item.label : item.alias || item.key || item.id || i;\n                    const sel = value === item.value ? 'true' : 'false';\n                    const foc = item.value === focusValue ? 'true' : 'false';\n                    const id = `${ARIA_ITEM_PREFIX}${item.value}`;\n                    const tabIndex = foc === 'true' ? 0 : -1;\n                    let cls = classnames({\n                        'ca-list-item': true,\n                        label: item.type === 'label',\n                        group: item.type === 'group',\n                        'focused': foc === 'true' // not actually styled used for querying\n                    });\n                    if (item.class) {\n                        cls = `${cls} ${item.class}`;\n                    }\n                    if (item.type === 'label' || item.type === 'group') {\n                        return (\n                            <li\n                                role=\"presentation\"\n                                aria-label={propLabel}\n                                className={cls}\n                                key={propLabel}\n                            >{item.label}</li>\n                        );\n                    }\n                    return (\n                        <li\n                            role=\"option\"\n                            aria-selected={sel}\n                            aria-label={propLabel}\n                            id={id}\n                            className={cls}\n                            key={propLabel}\n                            value={item.value}\n                            tabIndex={tabIndex}\n                            onClick={this.onClick}\n                            disabled={item.disabled}\n                        >{item.label}</li>\n                    );\n                })}\n            </ul>\n        );\n    }\n}"],"mappings":"AASA","sourceRoot":""}